// server.js

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const axios = require('axios');
const CVE = require('./models/CVE'); 

const app = express();
app.use(express.json());
app.use(cors());

mongoose.connect('mongodb+srv://purushothsolo:purushoth7@senti.bxms1hy.mongodb.net/?retryWrites=true&w=majority&appName=senti');


app.get('/fetch-cves', async (req, res) => {
  try {
    const response = await axios.get('https://services.nvd.nist.gov/rest/json/cves/2.0');
    const vulnerabilities = response.data.vulnerabilities;

    const uniqueCVEs = [];

    for (const vulnerability of vulnerabilities) {
      const existingCVE = await CVE.findOne({ 'cve.id': vulnerability.cve.id });
      if (!existingCVE) {
        uniqueCVEs.push(vulnerability);
      }
    }

    await CVE.deleteMany({}); 

    const savedCVEs = await CVE.insertMany(vulnerabilities); 

    res.json({ success: true, savedCVEs });
  } catch (error) {
    console.error('Error fetching and storing CVEs:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

app.get('/cves', async (req, res) => {
  try {
    const { startIndex, resultsPerPage } = req.query;
    const startIndexNum = parseInt(startIndex);
    const resultsPerPageNum = parseInt(resultsPerPage);

    const cves = await CVE.find()
      .skip(startIndexNum)
      .limit(resultsPerPageNum);

    const totalResults = await CVE.countDocuments();
    res.json({ vulnerabilities: cves, totalResults });
  } catch (error) {
    console.error('Error fetching CVEs:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

app.listen(5000, () => {
  console.log('Server is running on port 5000');
});
