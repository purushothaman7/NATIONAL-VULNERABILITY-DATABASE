
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './style.css';
import 'bootstrap/dist/css/bootstrap.min.css';
import Filter from './FilterComponent';

function App() {
  const [cves, setCves] = useState([]);
  const [startIndex, setStartIndex] = useState(0);
  const [resultsPerPage, setResultsPerPage] = useState(10);
  const [totalPages, setTotalPages] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalRecords, setTotalRecords] = useState(0);

  useEffect(() => {
    fetchAndStoreCVEs();
  }, []); 
  useEffect(() => {
    fetchCVEs();
  }, [startIndex, resultsPerPage]);

  const fetchAndStoreCVEs = async () => {
    try {
      const response = await axios.get('http://localhost:5000/fetch-cves');
      console.log('CVEs stored:', response.data.savedCVEs);
    } catch (error) {
      console.error('Error fetching and storing CVEs:', error);
    }
  };

  const fetchCVEs = async () => {
    try {
      const response = await axios.get(`http://localhost:5000/cves?startIndex=${startIndex}&resultsPerPage=${resultsPerPage}`);
      const { vulnerabilities, totalResults } = response.data;
      setTotalPages(Math.ceil(totalResults / resultsPerPage));
      setCves(vulnerabilities);
      setTotalRecords(totalResults);
    } catch (error) {
      console.error('Error fetching CVEs:', error);
    }
  };

  const handleChangeResultsPerPage = (event) => {
    setResultsPerPage(event.target.value);
    setStartIndex(0);
    setCurrentPage(1);
  };

  const handlePrevPage = () => {
    if (startIndex === 0) return;
    setStartIndex(Math.max(startIndex - resultsPerPage, 0));
    setCurrentPage(currentPage - 1);
  };

  const handleNextPage = () => {
    if (currentPage === totalPages) return;
    setStartIndex(startIndex + resultsPerPage);
    setCurrentPage(currentPage + 1);
  };

  const handlePageClick = (pageNumber) => {
    setStartIndex((pageNumber - 1) * resultsPerPage);
    setCurrentPage(pageNumber);
  };

  const rangeStart = startIndex + 1;
  const rangeEnd = Math.min(startIndex + resultsPerPage, totalRecords);

  const pageRangeStart = Math.max(currentPage - 2, 1);
  const pageRangeEnd = Math.min(currentPage + 2, totalPages);

  const pageNumbers = [];
  for (let i = pageRangeStart; i <= pageRangeEnd; i++) {
    pageNumbers.push(i);
  }

  function formatDate(dateStr) {
    const date = new Date(dateStr);
    const day = date.getDate();
    const month = date.toLocaleString('default', { month: 'short' });
    const year = date.getFullYear();
    return `${day} ${month.toUpperCase()} ${year}`;
}

  return (
    
    <div className="container mt-5">
      <h1 className="text-center mb-4">CVE List</h1>
      <div className="row mb-3">
        <div className="col-md-6">
          <span>Results Per Page:</span>
          <select className="form-select ms-2" value={resultsPerPage} onChange={handleChangeResultsPerPage}>
            <option value="10">10</option>
            <option value="50">50</option>
            <option value="100">100</option>
          </select>
        </div>
        <div className="col-md-6 text-end">
          <p className="mb-0">Showing {rangeStart} - {rangeEnd} out of {totalRecords} records</p>
        </div>
      </div>
      <table className="table">
        <thead>
          <tr>
            <th>CVE ID</th>
            <th>Identifier</th>
            <th>Published Date</th>
            <th>Last Modified Date</th>
            <th>Status</th>
          </tr>
        </thead>
        <tbody>
          {cves.map((cve, index) => (
            <tr key={index}>
              <td>{cve.cve.id}</td>
              <td>{cve.cve.sourceIdentifier}</td>
              <td>{formatDate (cve.cve.published)}</td>
              <td>{cve.cve.lastModified}</td>
              <td>{cve.cve.vulnStatus}</td>
            </tr>
          ))}
        </tbody>
      </table>
      <div className="d-flex justify-content-between">
        <button className="btn btn-primary" onClick={handlePrevPage} disabled={startIndex === 0}>Previous Page</button>
        <div>
          {pageNumbers.map((pageNumber) => (
            <button key={pageNumber} className={`btn ${pageNumber === currentPage ? 'btn-primary' : 'btn-secondary'}`} onClick={() => handlePageClick(pageNumber)}>
              {pageNumber}
            </button>
          ))} 
        </div>
        <button className="btn btn-primary" onClick={handleNextPage} disabled={currentPage === totalPages}>Next Page</button>
    

      </div>

    </div>
    
  );
 
}

export default App;
